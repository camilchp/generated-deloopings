{-

  This file contains:

  - Definition of GSet Homomorphisms
  - Definition of GSetEquiv : GSet Isomorphisms

-}

{-# OPTIONS --cubical --allow-unsolved-metas #-}

open import Cubical.Foundations.Everything
open import Cubical.Data.Sigma
open import Cubical.Algebra.Group
open import Cubical.Reflection.RecordEquiv

open import GSet

private
  variable
    ‚Ñì : Level

-- This lemma is probably part of the standard library somewhere: it states that
-- in order to show the equality p ‚â° q of two paths between types is it enough
-- to show that the corresponding equivalences are equal
pathEq : {A B : Type ‚Ñì} {p q : A ‚â° B} ‚Üí transport p ‚â° transport q ‚Üí p ‚â° q
pathEq {p = p} {q = q} t = isEmbedding‚ÜíInj (isEquiv‚ÜíisEmbedding (snd univalence)) p q (equivEq t)
  where
  open import Cubical.Foundations.Equiv
  open import Cubical.Functions.Embedding

-- TODO: can the Levels be different ?
record IsGSetHom {G : Group ‚Ñì} {X Y : Type ‚Ñì} (M : GSetStr G X)  (f : X ‚Üí Y) (N : GSetStr G Y)
  : Type ‚Ñì
  where

  -- shorter qualified names
  private
    module M = GSetStr M
    module N = GSetStr N

  field
    pres* : (g : ‚ü® G ‚ü©) (x : X ) ‚Üí f (g M.* x) ‚â° g N.* (f x)

unquoteDecl IsGSetHomIsoŒ£ = declareRecordIsoŒ£ IsGSetHomIsoŒ£ (quote IsGSetHom)

module _ {G : Group ‚Ñì} {X : Type ‚Ñì} {Y : Type ‚Ñì} {M : GSetStr {‚Ñì} G X} {f : X ‚Üí Y} {N : GSetStr {‚Ñì} G Y}
  (pres : (g : ‚ü® G ‚ü©) (x : X) ‚Üí f ((GSetStr._*_ M) g x) ‚â° (GSetStr._*_ N) g (f x))
  where

  makeIsGSetHom : IsGSetHom M f N
  makeIsGSetHom .IsGSetHom.pres* = pres

module _ {G : Group ‚Ñì} where

  GSetHom : (X Y : GSet G) ‚Üí Type ‚Ñì
  GSetHom X Y = Œ£[ f ‚àà (‚ü® X ‚ü© ‚Üí ‚ü® Y ‚ü©) ] IsGSetHom (str X) f (str Y)

  isGSetEquiv : {X Y : Type ‚Ñì} (M : GSetStr G X) (e : X ‚âÉ Y) (N : GSetStr G Y) ‚Üí Type ‚Ñì
  isGSetEquiv M e N = IsGSetHom M (e .fst) N

  GSetEquiv : (X Y : GSet G) ‚Üí Type ‚Ñì
  GSetEquiv X Y = Œ£[ e ‚àà (‚ü® X ‚ü© ‚âÉ ‚ü® Y ‚ü©) ] isGSetEquiv (str X) e (str Y)

  makeIsGSetEquiv = makeIsGSetHom

  isPropIsGSetHom : {X Y : GSet G} {f : ‚ü® X ‚ü© ‚Üí ‚ü® Y ‚ü©} ‚Üí isProp (IsGSetHom (str X) f (str Y))
  isPropIsGSetHom {X = X} {Y = Y} = isOfHLevelRespectEquiv 1 (invEquiv (isoToEquiv IsGSetHomIsoŒ£)) (isPropŒ†2 Œª g x ‚Üí ((str Y) .GSetStr.is-set) _ _)

  GSetIdEquiv : (X : GSet G) ‚Üí GSetEquiv X X
  GSetIdEquiv X = idEquiv ‚ü® X ‚ü© , makeIsGSetEquiv Œª x y ‚Üí refl

  idToGSetEquiv : {X Y : GSet G} ‚Üí X ‚â° Y ‚Üí GSetEquiv X Y
  idToGSetEquiv {X = X} = J (Œª Y p ‚Üí GSetEquiv X Y) (GSetIdEquiv X)

  idToGSetIdEquivRefl : {X : GSet G} ‚Üí idToGSetEquiv refl ‚â° GSetIdEquiv X
  idToGSetIdEquivRefl {X = X} = JRefl (Œª Y p ‚Üí GSetEquiv X Y) (GSetIdEquiv X)

  -- the underlying equivalence of idToGSetEquiv is pathToEquiv
  idToGSetEquivFst : {X Y : GSet G} (p : X ‚â° Y) ‚Üí fst (idToGSetEquiv p) ‚â° pathToEquiv (cong fst p)
  idToGSetEquivFst {X} {Y} = J (Œª Y p ‚Üí fst (idToGSetEquiv p) ‚â° pathToEquiv (cong fst p)) lem
    where
    lem =
      fst (idToGSetEquiv {X = X} refl) ‚â°‚ü® cong fst (idToGSetIdEquivRefl {X = X}) ‚ü©
      fst (GSetIdEquiv X) ‚â°‚ü® sym pathToEquivRefl ‚ü©
      pathToEquiv (refl {x = fst X}) ‚â°‚ü® refl ‚ü©
      pathToEquiv (cong fst (refl {x = X})) ‚àé

  GSetEquiv‚â° : {X Y : GSet G} {f g : GSetEquiv X Y} ‚Üí equivFun (fst f) ‚â° equivFun (fst g) ‚Üí f ‚â° g
  GSetEquiv‚â° p = Œ£‚â°Prop (Œª _ ‚Üí isPropIsGSetHom) (Œ£‚â°Prop isPropIsEquiv p)

  GSetPath : (X Y : GSet G) ‚Üí (GSetEquiv X Y) ‚âÉ (X ‚â° Y)
  GSetPath X Y = ‚à´ ùíÆ·¥∞-GSet .UARel.ua X Y
    where
    open import Cubical.Displayed.Base
    open import Cubical.Displayed.Universe
    open import Cubical.Displayed.Record
    open import Cubical.Displayed.Auto

    ùíÆ·¥∞-GSet : DUARel (ùíÆ-Univ ‚Ñì) (GSetStr G) ‚Ñì
    ùíÆ·¥∞-GSet = ùíÆ·¥∞-Record (ùíÆ-Univ _) isGSetEquiv (fields: data[ œï ‚à£ autoDUARel _ _ ‚à£ {!compat!} ])
      where
      open GSetStr
      open IsGSetHom
      -- (GSetHom.autoDUA DUARel.‚âÖ·¥∞‚ü® œï r ‚ü© e) (œï r')
      --  PathP
      -- (Œª i ‚Üí
         -- Action G
         -- (Agda.Builtin.Cubical.Glue.primGlue a
          -- (Œª .x ‚Üí (Œª { (i = i0) ‚Üí a , e ; (i = i1) ‚Üí a , idEquiv a }) _ .fst)
          -- (Œª .x ‚Üí
             -- (Œª { (i = i0) ‚Üí a , e ; (i = i1) ‚Üí a , idEquiv a }) _ .snd)))
      -- (œï r) (œï r')
      compat : {X X' : Type ‚Ñì} {r : GSetStr G X} {e : X ‚âÉ X'} {r' : GSetStr G X'} ‚Üí isGSetEquiv r e r' ‚Üí PathP {!!} (œï r) (œï r') 
      compat = {!pres*!}

  GSetUnivalence : {X Y : GSet G} ‚Üí isEquiv (idToGSetEquiv {X = X} {Y = Y})
  GSetUnivalence {X} {Y} = {!!}
    where
    lem : (X ‚â° Y) ‚âÉ GSetEquiv X Y
    lem =
      X ‚â° Y ‚âÉ‚ü® {!!} ‚ü©
      GSetEquiv X Y ‚ñ†

  GSetUA : {X Y : GSet G} ‚Üí GSetEquiv X Y ‚Üí X ‚â° Y
  GSetUA {X} {Y} = invEq (_ , GSetUnivalence {X = X} {Y = Y})

  GSetUAŒ≤ : {X Y : GSet G} (f : GSetEquiv X Y) ‚Üí idToGSetEquiv (GSetUA f) ‚â° f
  GSetUAŒ≤ f = secEq (idToGSetEquiv , GSetUnivalence) f

  GSetUAŒ∑ : {X Y : GSet G} (p : X ‚â° Y) ‚Üí GSetUA (idToGSetEquiv p) ‚â° p
  GSetUAŒ∑ p = retEq (idToGSetEquiv , GSetUnivalence) p

  GSetUAFst : {X Y : GSet G} (f : GSetEquiv X Y) ‚Üí cong fst (GSetUA f) ‚â° ua (fst f)
  GSetUAFst f = pathEq lem
    where
    lem =
      transport (cong fst (GSetUA f)) ‚â°‚ü® refl ‚ü©
      subst fst (GSetUA f)            ‚â°‚ü® {!!} ‚ü©
      equivFun (fst f)                ‚â°‚ü® sym (funExt (Œª x ‚Üí uaŒ≤ (fst f) x)) ‚ü©
      transport (ua (fst f))          ‚àé
